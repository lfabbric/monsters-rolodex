{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placehodler","handleChange","type","placeholder","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","console","log","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAGaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAML,EAAMI,QAAQE,OACpB,6BAAMN,EAAMI,QAAQG,YCFfC,G,MAAW,SAAAR,GAAK,OACzB,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCDlBM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBAAOZ,UAAU,SACba,KAAK,SACLC,YAAaH,EACbI,SAAUH,MC0CHI,E,kDA/Cb,aAAgB,IAAD,8BACb,gBAqBFJ,aAAe,SAAAK,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SArBtC,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IAJF,E,qDAaf,WAAqB,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKT,SAAU,CAACV,SAAUmB,IAC1BC,QAAQC,IAAIF,Q,oBAQhB,WAEE,MAAkCG,KAAKR,MAA/Bd,EAAR,EAAQA,SAAUW,EAAlB,EAAkBA,YAIZY,EAAmBvB,EAASwB,QAAO,SAAA7B,GAAO,OAC9CA,EAAQE,KAAK4B,cAAcC,SAASf,EAAYc,kBAGlD,OACE,sBAAKjC,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAckB,KAAKlB,eAC5D,cAAC,EAAD,CAAUJ,SAAUuB,W,GAzCVI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8a52b813.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => (\r\n    <div className=\"card-container\">\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n        <h1>{ props.monster.name }</h1>\r\n        <h2>{ props.monster.email }</h2>\r\n    </div>\r\n)\r\n","import React from 'react';\r\nimport { Card } from '../card/card.component';\r\nimport './card-list.styles.css';\r\n\r\n\r\nexport const CardList = props => (\r\n    <div className='card-list'>\r\n        {props.monsters.map(monster => (\r\n            <Card key={monster.id} monster={monster} />\r\n        ))}\r\n    </div>\r\n);\r\n","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\n\r\n// functional component - get props and returns html\r\n// does not require access to state\r\n\r\nexport const SearchBox = ({ placehodler, handleChange }) => (\r\n    <input className='search'\r\n        type='search'\r\n        placeholder={placehodler}\r\n        onChange={handleChange}\r\n    />\r\n);\r\n","import './App.css';\nimport {CardList} from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport { Component } from 'react';\n\nclass App extends Component {\n  constructor () {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n\n    // method state\n    // this.handleChange = this.handleChange.bind(this); // very verbose can use following below\n    // handleChange = (e) => {}\n    \n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => {\n      this.setState( {monsters: users} );\n      console.log(users);\n    });\n  }\n\n  handleChange = e => { // automatic laxicol scoping\n    this.setState({ searchField: e.target.value });\n  };\n\n  render() {\n    // on search change, do not change the monsters array\n    const { monsters, searchField } = this.state;\n    // same as \n    // const monsters = this.state.monsters;\n    // const searchField = this.state.searchField\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox placehodler='Search Monsters' handleChange={this.handleChange} />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}